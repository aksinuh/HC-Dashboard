# Generated by Django 5.1.7 on 2025-04-02 07:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PatientsInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], max_length=1)),
                ('contact_number', models.CharField(max_length=15)),
                ('emergency_contact', models.CharField(max_length=15)),
                ('insurance_provider', models.CharField(max_length=100)),
                ('profile_picture', models.URLField(blank=True)),
                ('age', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name_plural': 'Personal Information',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LabResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.FileField(upload_to='diaqnoz/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.patientsinfo', verbose_name='results')),
            ],
        ),
        migrations.CreateModel(
            name='HealthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.CharField(max_length=20)),
                ('year', models.PositiveIntegerField()),
                ('systolic_value', models.PositiveIntegerField()),
                ('systolic_level', models.CharField(choices=[('low', 'Lower than Average'), ('normal', 'Normal'), ('high', 'Higher than Average')], max_length=20)),
                ('diastolic_value', models.PositiveIntegerField()),
                ('diastolic_level', models.CharField(choices=[('low', 'Lower than Average'), ('normal', 'Normal'), ('high', 'Higher than Average')], max_length=20)),
                ('heart_rate_value', models.PositiveIntegerField()),
                ('heart_rate_level', models.CharField(choices=[('low', 'Lower than Average'), ('normal', 'Normal'), ('high', 'Higher than Average')], max_length=20)),
                ('respiratory_rate_value', models.PositiveIntegerField()),
                ('respiratory_rate_level', models.CharField(choices=[('low', 'Lower than Average'), ('normal', 'Normal'), ('high', 'Higher than Average')], max_length=20)),
                ('temperature_value', models.PositiveIntegerField()),
                ('temperature_level', models.CharField(choices=[('low', 'Lower than Average'), ('normal', 'Normal'), ('high', 'Higher than Average')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_records', to='data.patientsinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('status', models.CharField(max_length=150)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.patientsinfo', verbose_name='patient')),
            ],
        ),
    ]
